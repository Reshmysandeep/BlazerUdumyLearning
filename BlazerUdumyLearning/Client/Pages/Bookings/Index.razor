@page "/bookings/"
@inject HttpClient _bookingClient
@inject IJSRuntime _js
@attribute [Authorize]



<h3 class="card-title">Bookings</h3>
<hr />
<br />

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Booking
</a>
<br />
<hr />


@if (BookingModel == null)
{
    <div class="alert alert-info">Loading....</div>
}
else
{
    <table class="table table-responsive-md">
        <thead>
            <tr>
                <th>Customer Tax Id</th>
                <th>Date</th>
                <th>Duration in Days</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in BookingModel)
            {
                <tr>
                    <td>@booking.Customers.TaxId</td>
                    <td>@booking.CreatedDate.Date.ToString("dd MMMM yyyy")</td>
                    <td>
                        @(booking.DateIn != null ? (booking.DateIn - booking.DateOut).TotalDays.ToString()
                            : "To Be Determined")
                    </td>
                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/bookings/update/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Booking> BookingModel;

    protected async override Task OnInitializedAsync()
    {
        BookingModel = await _bookingClient.GetFromJsonAsync<List<Booking>>($"{EndPoints.BookingEndpoint}");// ("api/Brands");
    }
    async Task Delete(int bookingid)
    {
        var booking = BookingModel.Find(b => b.Id == bookingid);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"Do you want to delete { booking.Customers.TaxId } ?");
        if (confirm)
        {
            await _bookingClient.DeleteAsync($"{EndPoints.BookingEndpoint}/{bookingid}");
            await OnInitializedAsync();
        }
    }
}
